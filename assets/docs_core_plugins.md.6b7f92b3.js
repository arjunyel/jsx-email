import{_ as s,o as n,c as a,Q as o}from"./chunks/framework.a2f82312.js";const D=JSON.parse('{"title":"Plugins","description":"Plugins","frontmatter":{"title":"Plugins","description":"Plugins","head":[["meta",{"name":"og:description","content":"Plugins"}],["meta",{"name":"og:image","content":"https://jsx.email/og.png"}],["meta",{"name":"og:site_name","content":"JSX email"}],["meta",{"name":"og:title","content":"Plugins"}],["meta",{"name":"og:type","content":"website"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:description","content":"Plugins"}],["meta",{"name":"twitter:image","content":"https://jsx.email/og.png"}],["meta",{"name":"twitter:title","content":"Plugins"}]]},"headers":[],"relativePath":"../../../docs/core/plugins.md","filePath":"../../../docs/core/plugins.md"}'),e={name:"../../../docs/core/plugins.md"},l=o(`<h2 id="plugins" tabindex="-1">Plugins <a class="header-anchor" href="#plugins" aria-label="Permalink to &quot;Plugins&quot;">​</a></h2><p><code>jsx-email</code> supports plugins to modify the rendering pipeline according to need. A plugin might provide custom minifcation after rendering, or replace tokens in a template before rendering, for example. For implementation examples, please see the Core Plugins below.</p><h3 id="core-plugins" tabindex="-1">Core Plugins <a class="header-anchor" href="#core-plugins" aria-label="Permalink to &quot;Core Plugins&quot;">​</a></h3><p>By default, <code>jsx-email</code> ships with <code>peerDependencies</code> on several plugins:</p><ul><li><a href="/docs/plugins/inline"><code>plugin-inline</code></a></li><li><a href="/docs/plugins/minify"><code>plugin-minify</code></a></li><li><a href="/docs/plugins/pretty"><code>plugin-pretty</code></a></li></ul><h3 id="authoring-plugins" tabindex="-1">Authoring Plugins <a class="header-anchor" href="#authoring-plugins" aria-label="Permalink to &quot;Authoring Plugins&quot;">​</a></h3><p>Plugins are extremely flexible in how they&#39;re provided to <code>jsx-email</code>. They can be the result of a local function, a file export, or a package export. Regardless of how a plugin is provided, all plugins are defined by a straightforward interface:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki slack-dark vp-code-dark"><code><span class="line"><span style="color:#C586C0;">export</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">interface</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">JsxEmailPlugin</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">afterRender</span><span style="color:#D4D4D4;">?:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">RenderHookFn</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">beforeRender</span><span style="color:#D4D4D4;">?:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">RenderHookFn</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">string</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">process</span><span style="color:#D4D4D4;">?:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ProcessHookFn</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">symbol</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">typeof</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">pluginSymbol</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span></code></pre><pre class="shiki slack-ochin vp-code-light"><code><span class="line"><span style="color:#7B30D0;">export</span><span style="color:#002339;"> </span><span style="color:#0991B6;">interface</span><span style="color:#002339;"> </span><span style="color:#0444AC;">JsxEmailPlugin</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#2F86D2;">afterRender</span><span style="color:#7B30D0;">?:</span><span style="color:#002339;"> </span><span style="color:#0444AC;">RenderHookFn</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#2F86D2;">beforeRender</span><span style="color:#7B30D0;">?:</span><span style="color:#002339;"> </span><span style="color:#0444AC;">RenderHookFn</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#2F86D2;">name</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">string</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#2F86D2;">process</span><span style="color:#7B30D0;">?:</span><span style="color:#002339;"> </span><span style="color:#0444AC;">ProcessHookFn</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#2F86D2;">symbol</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">typeof</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">pluginSymbol</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>To instruct a render to use plugins, utilize a <a href="/docs/core/config">Configuration File</a> and specify the <code>plugins</code> property:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki slack-dark vp-code-dark"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#E6E6E6;"> { </span><span style="color:#9CDCFE;">defineConfig</span><span style="color:#E6E6E6;"> } </span><span style="color:#C586C0;">from</span><span style="color:#E6E6E6;"> </span><span style="color:#CE9178;">&#39;jsx-email/config&#39;</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#E6E6E6;"> { </span><span style="color:#9CDCFE;">somePlugin</span><span style="color:#E6E6E6;"> } </span><span style="color:#C586C0;">from</span><span style="color:#E6E6E6;"> </span><span style="color:#CE9178;">&#39;./plugins/some-plugin&#39;</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">const</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">config</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> </span><span style="color:#DCDCAA;">defineConfig</span><span style="color:#E6E6E6;">({</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">plugins:</span><span style="color:#E6E6E6;"> [</span><span style="color:#9CDCFE;">somePlugin</span><span style="color:#E6E6E6;">]</span></span>
<span class="line"><span style="color:#E6E6E6;">});</span></span></code></pre><pre class="shiki slack-ochin vp-code-light"><code><span class="line"><span style="color:#7B30D0;">import</span><span style="color:#002339;"> { </span><span style="color:#2F86D2;">defineConfig</span><span style="color:#002339;"> } </span><span style="color:#7B30D0;">from</span><span style="color:#002339;"> </span><span style="color:#A44185;">&#39;jsx-email/config&#39;</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#7B30D0;">import</span><span style="color:#002339;"> { </span><span style="color:#2F86D2;">somePlugin</span><span style="color:#002339;"> } </span><span style="color:#7B30D0;">from</span><span style="color:#002339;"> </span><span style="color:#A44185;">&#39;./plugins/some-plugin&#39;</span><span style="color:#002339;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B30D0;">export</span><span style="color:#002339;"> </span><span style="color:#0991B6;">const</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">config</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7EB233;">defineConfig</span><span style="color:#002339;">({</span></span>
<span class="line"><span style="color:#002339;">  plugins: [</span><span style="color:#2F86D2;">somePlugin</span><span style="color:#002339;">]</span></span>
<span class="line"><span style="color:#002339;">});</span></span></code></pre></div><h3 id="lifecycle-hooks" tabindex="-1">Lifecycle Hooks <a class="header-anchor" href="#lifecycle-hooks" aria-label="Permalink to &quot;Lifecycle Hooks&quot;">​</a></h3><p>Plugins can affect a template at several different stages throughout the rendering process. The following hooks are supported, and are executed in the following order:</p><ul><li><code>afterRender</code></li><li><code>process</code></li><li><code>beforeRender</code></li></ul><p>Implemented hooks within plugins can be synchronous or asynchrounous and return a <code>Promise</code>. All hooks are exexcuted <em>after</em> JSX is converted to HTML.</p><p>Function definitions for both <code>afterRender</code> and <code>beforeRender</code> should match:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki slack-dark vp-code-dark"><code><span class="line"><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">params</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">RenderHookParams</span><span style="color:#E6E6E6;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">string</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">|</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">Promise</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#9CDCFE;">string</span><span style="color:#D4D4D4;">&gt;</span><span style="color:#E6E6E6;">;</span></span></code></pre><pre class="shiki slack-ochin vp-code-light"><code><span class="line"><span style="color:#002339;">(</span><span style="color:#B1108E;">params</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#0444AC;">RenderHookParams</span><span style="color:#002339;">) </span><span style="color:#0991B6;">=&gt;</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">string</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">|</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">Promise</span><span style="color:#7B30D0;">&lt;</span><span style="color:#2F86D2;">string</span><span style="color:#7B30D0;">&gt;</span><span style="color:#002339;">;</span></span></code></pre></div><p>The <code>params</code> argument provided to these two hooks match the following definition:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki slack-dark vp-code-dark"><code><span class="line"><span style="color:#569CD6;">interface</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">RenderHookParams</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">chalk</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">typeof</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">chalk</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">html</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">string</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">log</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">any</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span></code></pre><pre class="shiki slack-ochin vp-code-light"><code><span class="line"><span style="color:#0991B6;">interface</span><span style="color:#002339;"> </span><span style="color:#0444AC;">RenderHookParams</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#2F86D2;">chalk</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">typeof</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">chalk</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#2F86D2;">html</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">string</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#2F86D2;">log</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">any</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p>As a convenience, all hooks are provided a <code>chalk</code> instance and a <code>log</code> utility for providing user feedback in the console.</p><h4 id="afterrender" tabindex="-1"><code>afterRender</code> <a class="header-anchor" href="#afterrender" aria-label="Permalink to &quot;\`afterRender\`&quot;">​</a></h4><p>As the name suggests, this hook is run after the other hooks and after <code>render</code> is considered to be complete, but before the resulting HTML is written to disk.</p><h4 id="beforerender" tabindex="-1"><code>beforeRender</code> <a class="header-anchor" href="#beforerender" aria-label="Permalink to &quot;\`beforeRender\`&quot;">​</a></h4><p>This hook is run just before the HTML processing step is begun. It can be handy for replacing tokens in the HTML that may have an effect in the processing step or <code>afterRender</code> hooks.</p><h4 id="process" tabindex="-1"><code>process</code> <a class="header-anchor" href="#process" aria-label="Permalink to &quot;\`process\`&quot;">​</a></h4><p>The <code>process</code> hook is unique in that the return result from the hook function should return a <a href="https://unifiedjs.com/learn/guide/create-a-rehype-plugin/" target="_blank" rel="noreferrer"><code>rehype</code> Plugin</a>. <code>jsx-email</code> uses <a href="https://github.com/rehypejs/rehype" target="_blank" rel="noreferrer"><code>rehype</code></a> for compliant and <em>fast</em> HTML processing and modification. The <a href="https://github.com/shellscape/jsx-email/blob/main/packages/plugin-minify" target="_blank" rel="noreferrer"><code>plugin-minify</code> Core Plugin</a> provides an example of such a <code>rehype</code> plugin. This hook runs between <code>beforeRender</code> and <code>afterRender</code>. The function definition for this hook should match:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki slack-dark vp-code-dark"><code><span class="line"><span style="color:#569CD6;">interface</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ProcessHookParams</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">chalk</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">typeof</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">chalk</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">log</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">any</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">params</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ProcessHookParams</span><span style="color:#E6E6E6;">) </span><span style="color:#569CD6;">=&gt;</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">RehypePlugin</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">|</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">RehypePreset</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">|</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">Promise</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#9CDCFE;">RehypePlugin</span><span style="color:#D4D4D4;">&gt;</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">|</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">Promise</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#9CDCFE;">RehypePreset</span><span style="color:#D4D4D4;">&gt;</span><span style="color:#E6E6E6;">;</span></span></code></pre><pre class="shiki slack-ochin vp-code-light"><code><span class="line"><span style="color:#0991B6;">interface</span><span style="color:#002339;"> </span><span style="color:#0444AC;">ProcessHookParams</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#2F86D2;">chalk</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">typeof</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">chalk</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#2F86D2;">log</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">any</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">(</span><span style="color:#B1108E;">params</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#0444AC;">ProcessHookParams</span><span style="color:#002339;">) </span><span style="color:#0991B6;">=&gt;</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#2F86D2;">RehypePlugin</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">|</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">RehypePreset</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">|</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">Promise</span><span style="color:#7B30D0;">&lt;</span><span style="color:#2F86D2;">RehypePlugin</span><span style="color:#7B30D0;">&gt;</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">|</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">Promise</span><span style="color:#7B30D0;">&lt;</span><span style="color:#2F86D2;">RehypePreset</span><span style="color:#7B30D0;">&gt;</span><span style="color:#002339;">;</span></span></code></pre></div>`,26),p=[l];function t(r,c,i,y,E,d){return n(),a("div",null,p)}const g=s(e,[["render",t]]);export{D as __pageData,g as default};
